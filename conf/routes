# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index
GET		/about						controllers.Application.about
GET		/help						controllers.Application.help

# Syntax checker

GET     /checker/data              controllers.Checker.data(data : String ?= "", dataFormat: String ?= "TURTLE")
GET     /checker/schema            controllers.Checker.schema(schemaStr : String ?= "", schemaFormat: String ?= "TURTLE", schemaName: String ?= "ShEx")

POST	/api/checker/schema		   controllers.Checker.schema_post
POST	/api/checker/data		   controllers.Checker.data_post

GET     /validate/data		        controllers.ValidatorData.data(data: String ?= "", dataFormat: String ?= "TURTLE", rdfs: Boolean ?= false, schemaName ?= "ShEx")
GET     /validate/dataSchema        controllers.ValidatorSchemaData.dataSchema(data: String ?= "", dataFormat: String ?= "TURTLE", rdfs: Boolean ?= false, schemaStr: String ?= "", schemaFormat : String ?= "SHEXC", schemaName ?= "ShEx")
GET     /validate/dataSchemaNode    controllers.ValidatorSchemaData.dataSchemaNode(data: String ?= "", dataFormat: String ?= "TURTLE", rdfs: Boolean ?= false, schema: String ?= "", schemaFormat : String ?= "SHEXC", node: String ?= "", schemaName ?= "ShEx")

# Converter

GET		/converter/data				controllers.DataConverter.convert_data_get(data: String, dataFormat: String ?= "TURTLE",targetFormat: String ?= "TURTLE",schemaName: String ?= "ShEx", rdfs: Boolean = false)
GET		/converter/dataFormats		controllers.DataConverter.dataFormats()
POST	/converter/data			    controllers.DataConverter.convert_data_post

GET		/converter/schema			controllers.SchemaConverter.convert_schema_get(schema:String,schemaFormat: String ?= "SHEXC", schemaName : String ?= "ShEx", targetFormat: String ?= "SHEXC")
GET		/converter/schemaFormats	controllers.SchemaConverter.schemaFormats()
POST	/converter/schema		    controllers.SchemaConverter.convert_schema_post

# API

# Validate Schema + Data
POST	/api/validator	controllers.ValidatorSchemaData.validate_post
GET		/api/validator	controllers.ValidatorSchemaData.validate_get(data: String, dataFormat: Option[String] ?= Some("TURTLE"),showData:Boolean ?= true, rdfs:Boolean ?= false, schema: Option[String] ?= None, schemaFormat: Option[String] ?= Some("SHEXC"), schemaName: String ?= "ShEx", node: Option[String] ?= None, shape: Option[String] ?= None, trigger: String ?= "ScopeDeclarations", cut:Int ?= 1, showSchema: Boolean ?= true)

# Valdate Data & Schema together
GET		/api/validator/data	controllers.ValidatorData.data(data: String ?= "", dataFormat: String ?= "TURTLE", rdfs: Boolean ?= false, schemaName ?= "ShEx")
POST	/api/validator/data	controllers.ValidatorData.validate_post


# This route is maintained to keep backwards compatibility (should be deprecated in the future
# GET		/validator	controllers.ValidatorSchemaData.validate_get(rdf: String, syntaxRDF:Option[String] ?= None, showRDF:Boolean ?= true, rdfs:Boolean ?= false, schema: Option[String] ?= None, schemaFormat: Option[String] ?= Some("SHEXC"), schemaVersion: String ?= "ShEx", iri: Option[String] ?= None, cut:Int ?= 1, showSchema: Boolean ?= true)


# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

GET     /webjars/*file                    controllers.WebJarAssets.at(file)
